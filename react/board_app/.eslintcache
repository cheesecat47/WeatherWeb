[{"/www/src/index.js":"1","/www/src/App.js":"2","/www/src/store.js":"3","/www/src/components/Navigator.js":"4","/www/src/components/Article.js":"5","/www/src/routes/Home.js":"6","/www/src/routes/Board.js":"7","/www/src/services/BoardApi.js":"8","/www/src/components/MainPage.js":"9","/www/src/services/sendRequest.js":"10","/www/src/config.js":"11"},{"size":548,"mtime":1611498124440,"results":"12","hashOfConfig":"13"},{"size":563,"mtime":1611498124440,"results":"14","hashOfConfig":"13"},{"size":2156,"mtime":1611498124440,"results":"15","hashOfConfig":"13"},{"size":1052,"mtime":1611498124440,"results":"16","hashOfConfig":"13"},{"size":1338,"mtime":1611498124440,"results":"17","hashOfConfig":"13"},{"size":2820,"mtime":1611498124440,"results":"18","hashOfConfig":"13"},{"size":989,"mtime":1611498124440,"results":"19","hashOfConfig":"13"},{"size":1086,"mtime":1611498124440,"results":"20","hashOfConfig":"13"},{"size":1301,"mtime":1611498124440,"results":"21","hashOfConfig":"13"},{"size":1201,"mtime":1611498124440,"results":"22","hashOfConfig":"13"},{"size":71,"mtime":1611498124440,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ndgb8s",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/www/src/index.js",[],["52","53"],"/www/src/App.js",[],"/www/src/store.js",["54","55","56","57"],"import React from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport * as service from './services/BoardApi';\n//useEffect({},[]) 두번째 인자에서 state ,data 등의 변화만을 감지해서 api에 데이터 요청하는\n//형식으로 짜면 되겠다....\n\n/*actionCreater function*/\nconst POST_BOARD = \"POST_BOARD\";\nconst DELETE = \"DELTE\";\nconst PATCh = \"PATCH\";\nconst GET_BOARD = \"GET_BOARD\";\n\n//user 정보 갱신하는 , board 정보 갱신, article 정보 갱신 func...\n\nconst getContent = (data) => {\n    return {\n        type: GET_BOARD,\n        data\n    }\n};\n\nconst postContent = (data) => {\n    return {\n        type: POST_BOARD,\n        data\n    };\n};\n\n//according to 'board' reducer function\nconst boardReducer = (state = [], action) => {\n    switch (action.type) {\n        case GET_BOARD:\n            // console.log(action.boardList);\n            // const stateObj = [action.boardList, ...state];\n            // console.log(a);\n            console.log(action);\n            return action.data;\n\n        case POST_BOARD:\n            console.log(\"action post에 왔다.\", state, action.input)\n            // const a = [{ input: action.input }, ...state];\n            // console.log(a);\n            return [{ input: action.input }, ...state];\n\n        default: return state;\n    }\n}\n\n//according to 'article' reducer function\nconst articleReducer = (state = [], action) => {\n    switch (action.type) {\n        case \"GET1\":\n            // console.log(action.boardList);\n            // const stateObj = [action.boardList, ...state];\n            // console.log(a);\n            return [2];\n\n        case \"POST1\":\n            console.log(\"action post에 왔다.\", state, action.input)\n            // const a = [{ input: action.input }, ...state];\n            // console.log(a);\n            return [{ input: action.input }, ...state];\n\n        default: return state;\n    }\n}\n\nconst rootReducer = combineReducers({\n    boardReducer,\n    articleReducer\n})\nconst store = createStore(rootReducer);\n\nexport const actionCreaters = {\n    postContent,\n    getContent\n    // deleteContent,\n    // updateContent\n}\n\nexport default store;\n","/www/src/components/Navigator.js",[],"/www/src/components/Article.js",["58"],"import React, { useState } from 'react';\nimport { actionCreaters } from '../store';\nimport { connect } from \"react-redux\";\n\nfunction Article() {\n\n  // const btnWrite = (e) =>{\n  //   e.preventDefault();\n  //   return <Write/>\n  // }\n return (\n    <div>\n      <h1>Article</h1>\n      <h3>article 내용~~~~</h3>\n      {/* <button onClick={btnWrite}>글쓰기</button> */}\n    </div>);\n}\n\n// function Write({articleContent,writeArticle}) {\n//   const [input, setInput] = useState(\"\");\n\n//   function onSubmit(e) {\n//     e.preventDefault();\n//     setInput(\"\");\n//     writeArticle(input);\n//     // dispatch(addToDo(text));\n//   }\n//   const onChange = (e) => { setInput(e.target.value); }\n\n//   return (\n//     <div>\n//       <h2>글 작성....</h2>\n//       <form onSubmit={onSubmit}>\n//         <input type=\"text\" value={input} onChange={onChange}/>\n//       <button>작성</button>\n//       </form>\n//       <button>취소</button>\n//     </div>\n//   )\n\n// }\n\nfunction mapStateToprops(state) {\n  console.log(state);\n  return { articleContent: state };\n  // console.log(state);\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    writeArticle: (input) => dispatch(actionCreaters.addContent(input))\n  };\n}\nexport default connect(mapStateToprops, mapDispatchToProps)(Article);\n// connect (mapStateToprops,mapDispatchToProps)(Write);\n","/www/src/routes/Home.js",["59","60","61"],"import React, { useState, useEffect } from 'react';\nimport MainPage from '../components/MainPage';\nimport '../css/MainPage.css';\nimport * as service from '../services/BoardApi';\nimport { connect } from 'react-redux';\nimport { actionCreaters } from '../store';\n\n// import Board from './Board';\n\nfunction Home({ boardList, getBoardInfo, createBoard }) {\n  //어떤 일 발생하는 것 등록하고 useEffect로 => loading false 변환하기, reload값으로 data post 된거 감지..\n  const [isLoading, setLoading] = useState(\"true\");\n  const [reload, setReload] = useState(false);\n  //submit 할 때 data...\n  const [text, setText] = useState(\"\");\n\n  //게시판 생성 sumbit...\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setText(\"\");\n    console.log(text);\n    const fetchData = async () => {\n      const res = await service.postBoard('/boards', text);\n      console.log(res);\n    }\n    //api server 동작하면 fetchData()주석 해제!!!\n    // fetchData();\n    setReload(true);\n    // createBoard(text)\n  }\n  const onChange = (e) => setText(e.target.value);\n\n  // const onClick = (e) => {\n  //   console.log(\"생각좀합시다...\");\n  // }\n\n  const renderBoard = (list) => {\n    if (list)\n      return list;\n    else {\n      console.log(\"mount 하기 전..\")\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await service.getBoardList('/boards');\n      console.log(res.data);\n      // setBoardList(res.data);\n      getBoardInfo(res.data);\n    }\n    //api server 동작하면 fetchData()주석 해제!!!\n    // fetchData();\n    setLoading(false);\n    setReload(false);\n  }, [reload]);\n\n  return (\n    <section className=\"container\">\n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader_text\">\"Loading\"</span>\n        </div>\n      ) : (\n          <div className=\"boards\">\n            <h2>게시판 리스트</h2>\n            <form onSubmit={onSubmit}>\n              <input type=\"text\" value={text} onChange={onChange} />\n              <button>게시판 생성</button>\n            </form>\n            {/* <button onClick={onClick}>게시판 삭제</button> */}\n            {renderBoard(boardList).map(board => (\n              <MainPage\n                key={board.boardId}\n                boardName={board.boardName}\n                boardId={board.boardId} />\n            ))}\n          </div>)}\n    </section>\n  );\n}\n\nfunction mapStateToProps(state) {\n  console.log(state);\n  return { boardList: state.boardReducer };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getBoardInfo: (data) => {\n      dispatch(actionCreaters.getContent(data))\n    }, createBoard: (data) => {\n      dispatch(actionCreaters.postContent(data))\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","/www/src/routes/Board.js",[],"/www/src/services/BoardApi.js",[],"/www/src/components/MainPage.js",["62","63","64","65"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as service from '../services/BoardApi';\nimport { actionCreaters } from '../store';\n\n//게시판 목록 조회\n\nfunction MainPage({ boardName, boardId}) {\n  \n  return (\n    <div className=\"card\" >\n      <div className=\"board\">\n        <h3>Name:{boardName}\n          {/* {renderBoard(boardList)} */}\n        </h3>\n        <h4>Id:{boardId}</h4>\n        \n        {/* {list[0].map(list => {\n          <h3>{list.name}</h3>\n        })} */}\n        {/* {boardList.map(board => board.name)} */}\n        {/* <Link to={{\n          pathname: `/board/${id}`,\n          state: {\n            id: \n          }\n          \n        }}>\n          <h3>{name}</h3></Link>\n        <div className=\"board_article\">{ }\n            <Link to={{\n              pathname: `/article/${article.article_id}`,\n            }}> <p>{article.title}</p></Link> */}\n\n      </div>\n    </div>\n  );\n}\n\n// function mapStateToProps(state) {\n//   console.log(state);\n//   return { boardList: state };\n// }\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createBoard: (data) => {\n      dispatch(actionCreaters.postContent(data))\n    }\n  };\n}\nexport default connect(null, mapDispatchToProps)(MainPage);","/www/src/services/sendRequest.js",[],"/www/src/config.js",["66"],"const API_SERVER_URL = \"api:8080\"\n\nexport default {\n  API_SERVER_URL\n};",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":13},{"ruleId":"71","severity":1,"message":"75","line":3,"column":13,"nodeType":"73","messageId":"74","endLine":3,"endColumn":20},{"ruleId":"71","severity":1,"message":"76","line":9,"column":7,"nodeType":"73","messageId":"74","endLine":9,"endColumn":13},{"ruleId":"71","severity":1,"message":"77","line":10,"column":7,"nodeType":"73","messageId":"74","endLine":10,"endColumn":12},{"ruleId":"71","severity":1,"message":"78","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"79","line":22,"column":11,"nodeType":"73","messageId":"74","endLine":22,"endColumn":20},{"ruleId":"71","severity":1,"message":"79","line":47,"column":11,"nodeType":"73","messageId":"74","endLine":47,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":57,"column":6,"nodeType":"82","endLine":57,"endColumn":14,"suggestions":"83"},{"ruleId":"71","severity":1,"message":"78","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"84","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"85","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":14},{"ruleId":"71","severity":1,"message":"75","line":4,"column":13,"nodeType":"73","messageId":"74","endLine":4,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":3,"column":1,"nodeType":"88","endLine":5,"endColumn":3},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'service' is defined but never used.","'DELETE' is assigned a value but never used.","'PATCh' is assigned a value but never used.","'useState' is defined but never used.","'fetchData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBoardInfo'. Either include it or remove the dependency array. If 'getBoardInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["91"],"'useEffect' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [getBoardInfo, reload]",{"range":"94","text":"95"},[1536,1544],"[getBoardInfo, reload]"]